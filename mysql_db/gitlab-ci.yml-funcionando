

stages:
    - build
    - deploy
    #- build

build-image:
    image: docker
    stage: build
    variables:
        DOCKER_TLS_CERTDIR: "/certs"
        MY_CI_REGISTRY: "gitlab.server.local:5050" 
        #DOCKER_DRIVER: overlay2
    services:
        - name: docker:26.1.3-dind  
          alias: docker
          #command: ["--insecure-registry=gitlab.server.local:5050", "--insecure-registry=192.168.0.20:5050"]
    script:
    - echo "Docker info"
    - docker info
    - echo "Trying to Log in!!!   ---- $MY_CI_REGISTRY —- & ---$CI_REGISTRY"
    - docker login -u  $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo "Logged in!!!"
    - docker build -t $CI_REGISTRY/devops/db-mysql:v1 .
    - echo "Image built!!!"
    - docker push $CI_REGISTRY/devops/db-mysql:v1 
    - echo "Imagem  construida!!+++ ! "


deploy-phpmyadmin:
    image: docker
    stage: deploy
    variables:
        DOCKER_TLS_CERTDIR: "/certs"
        #DOCKER_DRIVER: overlay2
        #DOCKER_TLS_CERTDIR: '/etc/gitlab-runner/certs' 

        #SSL_CERT_FILE: '/etc/gitlab-runner/certs/ca.crt'  

        #
        #DOCKER_TLS_CERTDIR: "home/ruy/tmp" #/cert.pem"
        MY_CI_REGISTRY: "gitlab.server.local:5050" 
    services:
        - name: docker:26.1.3-dind  
          alias: docker
          #command: ["--insecure-registry=gitlab.server.local:5050", "--insecure-registry=192.168.0.20:5050"]
    script:
    - echo "Docker info"
    - docker info
    - echo "Trying to Log in!!!   ---- $MY_CI_REGISTRY —- & ---$CI_REGISTRY"
    - docker login -u  $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo "Logged in!!!"
    - docker build -t $CI_REGISTRY/devops/db-mysql:phpMyadmin ./phpMyadmin 
    - echo "Image built!!!"
    - docker push $CI_REGISTRY/devops/db-mysql:phpMyadmin 
    - echo "Imagem  hpMyadmin construida!!+++! "








# https://stackoverflow.com/questions/75139307/docker-containers-gone-after-gitlab-ci-pipeline
# deploy-job:
#   stage: deploy
#   image: docker:latest
#   services:
#     - docker:dind
#   variables:
#     DOCKER_DRIVER: overlay2
#     DOCKER_TLS_CERTDIR: "/certs"
#   script:
#     - docker info
#     - docker compose down
#     - docker compose build
#     - docker compose up -d
#   rules:
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH





#https://stackoverflow.com/questions/66644453/how-can-my-nginx-docker-container-created-through-the-gitlab-ci-cd-use-the-htm 
# image: docker:dind

# variables:
#   DOCKER_TLS_CERTDIR: "/certs"

# services:
#   - docker:dind

# build:
#   stage: build
#   script:
#     #- apk add --no-cache docker-compose
#     - apt install docker-compose
#     - docker-compose down
#     - docker-compose up -d








# variables:
#   # Configure mysql service (https://hub.docker.com/_/mysql/)
#   MYSQL_DATABASE: ifmt_db
#   MYSQL_ROOT_PASSWORD: ifmt

#   MYSQL_USER: ifmt
#   MYSQL_PASSWORD: ifmt
#   MYSQL_HOST: mysql
#   DB_HOST: 'mysql'

# connect:
#   image: mysql:8.0
#   script:
#   #- echo "SELECT 'OK';" | mysql --user=root --password="$MYSQL_ROOT_PASSWORD" --host=mysql "$MYSQL_DATABASE"
#   - echo "SELECT 'OK';" | mysql -h$DB_HOST -u$MYSQL_USER -p$MYSQL_PASSWORD -e "CREATE DATABASE ${MYSQL_DATABASE};"

  



#https://gitlab.com/gitlab-examples/mysql/-/blob/master/.gitlab-ci.yml?ref_type=heads 
#https://gitlab.com/gitlab-org/gitlab-runner/-/issues/1552 

# stages:
#   - run_jobs
# variables:
#   MYSQL_DATABASE: "ifmt_db"
#   MYSQL_ROOT_PASSWORD: "ifmt"

# gitab_mysql_service:
#   stage: run_jobs
#   image: alpine
#   variables:
#     DOCKER_TLS_CERTDIR: "/certs"
#   services:
#     - mariadb:latest
#   script:
#     - apk --no-cache add mysql-client
#     - mysql --version
#     - sleep 20
#     - echo "SHOW  tables;"| mysql -u root -p"$MYSQL_ROOT_PASSWORD" -h 127.0.0.1 "${MYSQL_DATABASE}"

# services:
# - mysql


